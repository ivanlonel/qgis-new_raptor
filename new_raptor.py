# -*- coding: utf-8 -*-
"""
/***************************************************************************
 NewRaptor
                                 A QGIS plugin
 Add a new raptor nest, create buffer and impact table
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-07-09
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Ivan Donisete Lonel
        email                : ivanlonel91@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os.path

import qgis.core
from qgis.PyQt.QtCore import QCoreApplication, QDateTime, QSettings, Qt, QTranslator
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox, QTableWidgetItem

# Initialize Qt resources from file resources.py
from . import resources  # noqa: F401

# Import the code for the dialogs
from .impact_table import ImpactTable
from .new_raptor_dialog import NewRaptorDialog


class NewRaptor:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value("locale/userLocale")[:2]
        locale_path = os.path.join(self.plugin_dir, "i18n", f"NewRaptor_{locale}.qm")

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr("&Add New Raptor")

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate("NewRaptor", message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
    ):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(self.menu, action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ":/plugins/new_raptor/icon.png"
        self.add_action(
            icon_path, text=self.tr("Add New Raptor Nest"), callback=self.run, parent=self.iface.mainWindow()
        )

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(self.tr("&Add New Raptor"), action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start:
            self.first_start = False
            self.dlg = NewRaptorDialog()
            self.dlg.cmb_species.currentTextChanged.connect(self.evt_cmb_species_changed)

        mc = self.iface.mapCanvas()
        self.dlg.spb_lat.setValue(mc.center().y())
        self.dlg.spb_lon.setValue(mc.center().x())
        self.dlg.dte_last.setDateTime(QDateTime.currentDateTime())

        required_layer_names = ("Raptor Nests", "Raptor Buffer", "Linear Buffer")

        map_layer_names = [lyr.name() for lyr in mc.layers()]
        missing_layers = [lyr for lyr in required_layer_names if lyr not in map_layer_names]
        if missing_layers:
            QMessageBox.critical(
                self.dlg,
                "Missing layers",
                "The following layers are missing from this project:\n\n" + "\n".join(missing_layers),
            )
            return

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            layers = {}
            project_instance = qgis.core.QgsProject.instance()
            for layer_name in required_layer_names:
                try:
                    (layer,) = project_instance.mapLayersByName(layer_name)
                except ValueError:
                    QMessageBox.critical(
                        self.dlg,
                        "Problem with layer",
                        f"There must be one and only one layer called {layer_name}",
                    )
                    return
                else:
                    layers[layer_name] = layer

            values = {
                "Nest_ID": layers["Raptor Nests"].maximumValue(layers["Raptor Nests"].fields().indexOf("Nest_ID")) + 1,
                "lat_y_dd": self.dlg.spb_lat.value(),
                "long_x_dd": self.dlg.spb_lon.value(),
                "recentspec": self.dlg.cmb_species.currentText(),
                "buf_dist": self.dlg.spb_buffer.value(),
                "recentstat": self.dlg.cmb_status.currentText(),
                "lastsurvey": self.dlg.dte_last.dateTime(),
            }

            # QMessageBox.information(self.dlg, "New Values", "\n".join(f"{k} = {v}" for k, v in values.items()))

            ftr_nest = qgis.core.QgsFeature(layers["Raptor Nests"].fields())

            for k, v in values.items():
                ftr_nest.setAttribute(k, v)

            geom = qgis.core.QgsGeometry(qgis.core.QgsPoint(values["long_x_dd"], values["lat_y_dd"]))
            ftr_nest.setGeometry(geom)

            layers["Raptor Nests"].dataProvider().addFeature(ftr_nest)
            layers["Raptor Nests"].reload()

            buffer = geom.buffer(values["buf_dist"], 10)
            ftr_nest.setGeometry(buffer)
            layers["Raptor Buffer"].dataProvider().addFeature(ftr_nest)
            layers["Raptor Buffer"].reload()

            dlg_impact_table = ImpactTable()
            dlg_impact_table.setWindowTitle(f"Impacts Table for nest {values['Nest_ID']}")

            # Find linear projects that will be impacted and report them in the table
            for linear in layers["Linear Buffer"].getFeatures(buffer.boundingBox()):
                val_distance = linear.geometry().distance(geom)
                if val_distance < values["buf_dist"]:
                    row = dlg_impact_table.tbl_impacts.rowCount()
                    dlg_impact_table.tbl_impacts.insertRow(row)
                    dlg_impact_table.tbl_impacts.setItem(row, 0, QTableWidgetItem(str(linear.attribute("Project"))))
                    dlg_impact_table.tbl_impacts.setItem(row, 1, QTableWidgetItem(linear.attribute("type")))
                    twi = QTableWidgetItem(f"{val_distance:3.6f}")
                    twi.setTextAlignment(Qt.AlignRight)
                    dlg_impact_table.tbl_impacts.setItem(row, 2, twi)

            dlg_impact_table.tbl_impacts.sortItems(2)

            dlg_impact_table.show()
            dlg_impact_table.exec_()

    def evt_cmb_species_changed(self, species):
        if species == "Swainsons Hawk":
            self.dlg.spb_buffer.setValue(0.004)
        else:
            self.dlg.spb_buffer.setValue(0.008)
